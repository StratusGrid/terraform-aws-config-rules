header-from: ./.config/header.md

version: ""

formatter: markdown table

name: terraform-aws-config-rules

content: |-
 {{ .Header }}

  # terraform-aws-config-rules

  GitHub: [StratusGrid/terraform-aws-config-rules](https://github.com/StratusGrid/terraform-aws-config-rules)

  Terraform Registry: [StratusGrid/config-rules](https://registry.tf-registry-prod-use1.terraform.io/modules/StratusGrid/config-rules/aws/latest)

  AWS Config rules module to put in standard policies

  Note: Config Rule requires an existing Configuration Recorder to be present. There is available a StratusGrid terraform module to provision it [StratusGrid/config-recorder](https://registry.tf-registry-prod-use1.terraform.io/modules/StratusGrid/config-recorder/aws/latest)
  
  ## Example Single Region Configuration:
  The simplest example deploy the default AWS managed rules we added in the module
  - ROOT_ACCOUNT_MFA_ENABLED
  - IAM_ROOT_ACCESS_KEY_CHECK
  - IAM_USER_MFA_ENABLED

  If you want to disable those default rules set `enable_default_aws_managed_rules = false`

  ```hcl
  {{ include "examples/single-region/example1.tfnot" }}
  ```
  ---
  The second example adds besides the default AWS managed rules added in the example 1 the AWS managed rule required_tags_enabled along with the required parameters

  ```hcl
  {{ include "examples/single-region/example2.tfnot" }}
  ```
  ---
  The third example use the aws_managed_rules map with two defined rules. The existing AWS Managed rules can be found [here](https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html), and you can map them as shown below.

  ```hcl
  {{ include "examples/single-region/example3.tfnot" }}
  ```
  ![Alt aws-manage-rules](.config/aws-managed-rules.png)

  ---
  The fourth example shows the creation of a custom rule using [Guard domain-specific language (DSL)](https://docs.aws.amazon.com/cfn-guard/latest/ug/writing-rules.html)

  ```hcl
  {{ include "examples/single-region/example4.tfnot" }}
  ```

  ## Example Multi Region Configuration:
  ```hcl
  {{ include "examples/multi-region/example1.tfnot" }}
  ```
  ---

  {{ .Resources }}

  {{ .Inputs }}

  {{ .Outputs }}

  ---
  ### Migrating to V2

  In the V2 version, the resource enumeration for AWS Config Rules has been updated. This change impacts how Terraform manages the lifecycle of your Config Rules deployed with any previous versions.
  
  In the previous versions the resources were naming with fixed names. e.g ("root-account-mfa-enabled", "iam-root-access-key-check", "required-tags"),
  now with this new version as we're using a for_each to the generation of resources the naming convention changes to from a fixed name to a list with the keys passing in the variable aws_managed_rules e.g. (aws_managed_rules["name-1"], aws_managed_rules["name-2"])
  
  The actions required for the migration would been
  1. Destroy existing config Rules
  2. Upgrade of the module to the latest version 2.x.x
  3. Recreate the config rules

  Why This is Necessary:
  The change in resource enumeration means that Terraform will no longer recognize the existing resources as being managed by the current state. 
  As a result, Terraform would otherwise attempt to create new resources rather than update the existing ones, leading to duplicate rules.



  <span style="color:red">Note:</span> Manual changes to the README will be overwritten when the documentation is updated. To update the documentation, run `terraform-docs -c .config/.terraform-docs.yml .`

sections:
  show:
    - header
    - resources
    - inputs
    - outputs
    - providers
    - requirements

sort:
  enabled: true
  by: name

output:
  file: README.md
  mode: replace
